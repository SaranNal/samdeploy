AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Reblie-lambda

  Sample SAM Template for Reblie-lambda.

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
  
  ProjectName:
    Type: String

Globals:
  Function:
    Timeout: 28
    Environment:
      Variables:
        STAGE: !Ref Stage

Resources:

  CodedeploylambdaFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref developmentCodeDeployNotification
      Principal: sns.amazonaws.com
      SourceArn: !Sub arn:aws:sns:us-east-1:387387405527:${ProjectName}-notifyCodeDeployStatusToTeams
  
  CodepipelinelambdaFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref codePipelineNotification
      Principal: sns.amazonaws.com
      SourceArn: !Sub arn:aws:sns:us-east-1:387387405527:${ProjectName}-notifyCodepipelineEventToTeams

  buildArtifactsForIntegratedPipelineLambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-buildArtifactsForIntegratedPipeline"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - !Ref buildArtifactsForIntegratedPipelineCustomManagedLambdaPolicy
        - arn:aws:iam::aws:policy/AWSCodePipeline_ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess
      Policies:
        - PolicyName: CodeDeployCustomPolicy
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                - codedeploy:GetDeployment
                - codedeploy:ListDeployments
                - codedeploy:StopDeployment
                Resource: "*"
        - PolicyName: ECSRegisterTaskDefinitionAndService
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                - ecs:UpdateService
                - ecs:ListTagsForResource
                - ecs:CreateService
                - ecs:ListAttributes
                - ecs:ListTasks
                - ecs:DeleteService
                - ecs:DescribeServices
                - ecs:DescribeTaskDefinition
                Resource: "*"

  SecrectManagerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub secretmanager-lambda-role-${ProjectName}-${Stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      Policies:
        - PolicyName: SecrectManager_Limited_Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
              - secretsmanager:GetSecretValue
              Resource: "*"

  buildArtifactsForIntegratedPipelineCustomManagedLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:    
      ManagedPolicyName: AWSLambdaBasicExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: "*"
  
  trackCodeDeployForTeamsUpdateLambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-trackCodeDeployForTeamsUpdate"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployReadOnlyAccess
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                 - logs:CreateLogGroup
                 - logs:CreateLogStream
                 - logs:PutLogEvents
                Resource: "*"

  developmentbuildArtifact:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: buildArtifactsForIntegratedPipeline
      Role: !GetAtt buildArtifactsForIntegratedPipelineLambdaServiceRole.Arn
      CodeUri: !Sub ${ProjectName}-buildArtifact/
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Timeout: 900
      Architectures:
        - x86_64
      Environment:
        Variables:
              DEV_APPLICATION_NAME: !Sub AppECS-${ProjectName}-${Stage}
              DEV_DEPLOYMENT_GROUP: !Sub DgpECS-${ProjectName}-${Stage}
              DEV_WEB_CLUSTER: !Sub ${ProjectName}-${Stage}
    Condition: IsDevelopment

  stagingbuildArtifact:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt buildArtifactsForIntegratedPipelineLambdaServiceRole.Arn
      FunctionName: buildArtifact-stage
      CodeUri: !Sub ${ProjectName}-buildArtifact/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 900
      Architectures:
        - x86_64
      Environment:
        Variables:
              STAGING_APPLICATION_NAME: !Sub AppECS-${ProjectName}-${Stage}
              STAGING_DEPLOYMENT_GROUP: !Sub DgpECS-${ProjectName}-${Stage}
              STAGING_WEB_CLUSTER: !Sub ${ProjectName}-${Stage}
    Condition: IsStaging

  productionbuildArtifact:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: buildArtifact-prod
      CodeUri: !Sub ${ProjectName}-buildArtifact/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 900
      Architectures:
        - x86_64
      Environment:
        Variables:
              PRODUCTION_APPLICATION_NAME: !Sub AppECS-${ProjectName}-${Stage}
              PRODUCTION_DEPLOYMENT_GROUP: !Sub DgpECS-${ProjectName}-${Stage}
              PRODUCTION_WEB_CLUSTER: !Sub ${ProjectName}-${Stage}
    Condition: IsProduction

  secretmanager:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: secretmanager-${Stage}
      Role: !GetAtt SecrectManagerServiceRole.Arn
      CodeUri: !Sub secret_manager/
      Handler: secret_manager.lambda_handler
      Runtime: python3.9
      Timeout: 900
      Architectures:
        - x86_64
      Environment:
        Variables:
              TEAMS_HOSTNAME: knackforge.webhook.office.com
              TEAMS_CHANNEL: /webhookb2/93eea688-6368-4c47-8d54-92a7ba364b30@196eed21-c67a-4aae-a70b-9f97644d5d14/IncomingWebhook/a5fab871a77e4c3ab1f770a1ba50c18f/73c1d036-08b9-4dd3-8346-afa964097b0a
              
  codePipelineNotification:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: notifyCodepipelineEventToTeams
      CodeUri: notifyCodepipelineEventToTeams/
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 120
      Architectures:
        - x86_64
      Environment:
        Variables:
              PIPELINE_URL: 'https://console.aws.amazon.com/codesuite/codepipeline/pipelines/'
              TEAMS_CHANNEL: '#AWS-notifications'

  developmentCodeDeployNotification:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt trackCodeDeployForTeamsUpdateLambdaServiceRole.Arn
      FunctionName: trackCodeDeployForTeamsUpdate
      CodeUri: trackCodeDeployForTeamsUpdate/
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 900
      Architectures:
        - x86_64
      Environment:
        Variables:
              APPROVAL_URL: https://us-east-1.console.aws.amazon.com/codesuite/codedeploy/deployments/
              TEAMS_CHANNEL: '#AWS-notifications'
              TEAMS_HOSTNAME: knackforge.webhook.office.com
              TEAMS_WEBHOOK_PATH: /webhookb2/f257b936-88a0-4123-abaa-9d534fc020b2@196eed21-c67a-4aae-a70b-9f97644d5d14/IncomingWebhook/3ca94de4365d4745ad44f8bdd0ad6220/73c1d036-08b9-4dd3-8346-afa964097b0a
              VERIFICATION_DEVELOPMENT_WEB_DOMAIN_URL: https://dev-api.reblie.com:9443/healthy
    Condition: IsDevelopment
  
  stagingCodeDeployNotification:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: trackCodeDeployForTeamsUpdate/
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 900
      Architectures:
        - x86_64
      Environment:
        Variables:
              APPROVAL_URL: https://us-east-1.console.aws.amazon.com/codesuite/codedeploy/deployments/
              TEAMS_CHANNEL: '#AWS-notifications'
              TEAMS_HOSTNAME: knackforge.webhook.office.com
              TEAMS_WEBHOOK_PATH: /webhookb2/93eea688-6368-4c47-8d54-92a7ba364b30@196eed21-c67a-4aae-a70b-9f97644d5d14/IncomingWebhook/a5fab871a77e4c3ab1f770a1ba50c18f/73c1d036-08b9-4dd3-8346-afa964097b0a
              VERIFICATION_DEVELOPMENT_WEB_DOMAIN_URL: https://stage-api.reblie.com:9443/healthy
    Condition: IsStaging  
  
  productionCodeDeployNotification:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: trackCodeDeployForTeamsUpdate/
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 900
      Architectures:
        - x86_64
      Environment:
        Variables:
              APPROVAL_URL: https://us-east-1.console.aws.amazon.com/codesuite/codedeploy/deployments/
              TEAMS_CHANNEL: '#lambda-notify'
              TEAMS_HOSTNAME: knackforge.webhook.office.com
              TEAMS_WEBHOOK_PATH: /webhookb2/f257b936-88a0-4123-abaa-9d534fc020b2@196eed21-c67a-4aae-a70b-9f97644d5d14/IncomingWebhook/3ca94de4365d4745ad44f8bdd0ad6220/73c1d036-08b9-4dd3-8346-afa964097b0a
              VERIFICATION_DEVELOPMENT_WEB_DOMAIN_URL: https://api.reblie.com:9443/healthy
    Condition: IsProduction

  EventRule0:
    Type: AWS::Events::Rule
    Properties:
      Description: If any changes done in secret_manager
      EventBusName: default
      EventPattern:
        source:
          - aws.secretsmanager
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - secretsmanager.amazonaws.com
          eventName:
            - PutSecretValue
      Name: secret_manager
      State: ENABLED
      Targets:
        - Id: !Ref secretmanager
          Arn: !Ref arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:secretmanager-lambda-role-${ProjectName}-${Stage}

Conditions:
  IsDevelopment: !Equals [!Ref Stage, dev]
  IsStaging: !Equals [!Ref Stage, stage]
  IsProduction: !Equals [!Ref Stage, prod]
